Add Broadcom Phy 54616 support in IGB driver

From: Mike Tsai <miktsai@cisco.com>

Signed-off-by: Mike Tsai <miktsai@cisco.com>
---
 drivers/net/ethernet/intel/igb/e1000_82575.c   |    9 +
 drivers/net/ethernet/intel/igb/e1000_defines.h |    8 +
 drivers/net/ethernet/intel/igb/e1000_hw.h      |    1 
 drivers/net/ethernet/intel/igb/e1000_phy.c     |  184 ++++++++++++++++++++++++
 drivers/net/ethernet/intel/igb/e1000_phy.h     |    5 +
 5 files changed, 207 insertions(+)

diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.c b/drivers/net/ethernet/intel/igb/e1000_82575.c
index ee74f95..1ecfd2c 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.c
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.c
@@ -286,6 +286,12 @@ static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
 		phy->ops.set_d3_lplu_state = igb_set_d3_lplu_state_82580;
 		phy->ops.force_speed_duplex = igb_phy_force_speed_duplex_m88;
 		break;
+	case BCM54616_E_PHY_ID:
+		phy->type		    = e1000_phy_bcm54616;
+		phy->ops.get_phy_info	    = igb_get_phy_info_bcm54616;
+		phy->ops.get_cable_length   = igb_get_cable_length_bcm54616;
+		phy->ops.force_speed_duplex = igb_phy_force_speed_duplex_bcm54616;
+		break;
 	default:
 		ret_val = -E1000_ERR_PHY;
 		goto out;
@@ -1595,6 +1601,9 @@ static s32 igb_setup_copper_link_82575(struct e1000_hw *hw)
 	case e1000_phy_82580:
 		ret_val = igb_copper_link_setup_82580(hw);
 		break;
+	case e1000_phy_bcm54616:
+		ret_val = igb_copper_link_setup_bcm54616(hw);
+		break;
 	default:
 		ret_val = -E1000_ERR_PHY;
 		break;
diff --git a/drivers/net/ethernet/intel/igb/e1000_defines.h b/drivers/net/ethernet/intel/igb/e1000_defines.h
index 217f813..eaed62c 100644
--- a/drivers/net/ethernet/intel/igb/e1000_defines.h
+++ b/drivers/net/ethernet/intel/igb/e1000_defines.h
@@ -860,6 +860,7 @@
 #define M88_VENDOR           0x0141
 #define I210_I_PHY_ID        0x01410C00
 #define M88E1543_E_PHY_ID    0x01410EA0
+#define BCM54616_E_PHY_ID    0x03625D10 /* Last 4bits indicate rev-id */
 
 /* M88E1000 Specific Registers */
 #define M88E1000_PHY_SPEC_CTRL     0x10  /* PHY Specific Control Register */
@@ -1013,4 +1014,11 @@
 #define E1000_RTTBCNRC_RF_INT_MASK	\
 	(E1000_RTTBCNRC_RF_DEC_MASK << E1000_RTTBCNRC_RF_INT_SHIFT)
 
+/*
+ * BCM54616 Specific registers
+ */
+#define BCM54616_EXT_CTRL     0x10
+/* BCM54616 Extended CTRL register */
+#define BCM54616_EXT_CTRL_MDIX_AUTO   0x4000
+
 #endif
diff --git a/drivers/net/ethernet/intel/igb/e1000_hw.h b/drivers/net/ethernet/intel/igb/e1000_hw.h
index ce55ea5..762679c 100644
--- a/drivers/net/ethernet/intel/igb/e1000_hw.h
+++ b/drivers/net/ethernet/intel/igb/e1000_hw.h
@@ -128,6 +128,7 @@ enum e1000_phy_type {
 	e1000_phy_ife,
 	e1000_phy_82580,
 	e1000_phy_i210,
+	e1000_phy_bcm54616,
 };
 
 enum e1000_bus_type {
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.c b/drivers/net/ethernet/intel/igb/e1000_phy.c
index c1bb64d..02e7d91 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.c
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.c
@@ -870,6 +870,190 @@ out:
 }
 
 /**
+ *  igb_copper_link_setup_bcm54616 - Setup bcm54616 PHY for copper link
+ *  @hw: pointer to the HW structure
+ *
+ *  Sets up Carrier-sense on Transmit and downshift values.
+ **/
+s32 igb_copper_link_setup_bcm54616(struct e1000_hw *hw)
+{
+	s32 ret_val;
+	u16 phy_data;
+
+	hw_dbg("igb_copper_link_setup_bcm54616");
+	if (hw->phy.reset_disable)
+		return 0;
+
+	if (hw->phy.type == e1000_phy_bcm54616) {
+		ret_val = hw->phy.ops.reset(hw);
+		if (ret_val) {
+			hw_dbg("Error resetting the PHY.\n");
+			return ret_val;
+		}
+	}
+	ret_val = hw->phy.ops.read_reg(hw, BCM54616_EXT_CTRL, &phy_data);
+	/*
+	 * Options:
+	 *   0 - Auto (default)
+	 *   1 - MDI mode This intermediate state is not available BCM54616.
+	 *   2 - MDI-X mode
+	 */
+	switch (hw->phy.mdix) {
+	case 1:
+	case 2:
+		phy_data |= BCM54616_EXT_CTRL_MDIX_AUTO;
+		break;
+	case 0:
+	default:/* Auto mode*/
+		phy_data &= (~BCM54616_EXT_CTRL_MDIX_AUTO);
+		break;
+	}
+	ret_val = hw->phy.ops.write_reg(hw, BCM54616_EXT_CTRL, phy_data);
+	if (ret_val)
+		return ret_val;
+
+	return ret_val;
+}
+
+/**
+ *  igb_phy_force_speed_duplex_bcm54616 - Force speed/duplex for BCM54616 PHY
+ *  @hw: pointer to the HW structure
+ *
+ * Calls the PHY setup function to force speed and duplex.  Clears the
+ * auto-crossover to force MDI manually.  Resets the PHY to commit the
+ * changes.  If time expires while waiting for link up, we reset the DSP.
+ * After reset, TX_CLK and CRS on Tx must be set.  Return successful upon
+ * successful completion, else return corresponding error code.
+ *
+ **/
+s32 igb_phy_force_speed_duplex_bcm54616(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val;
+	u16 phy_data;
+	bool link;
+
+	hw_dbg("igb_phy_force_speed_duplex_bcm54616");
+
+	ret_val = phy->ops.read_reg(hw, PHY_CONTROL, &phy_data);
+	if (ret_val)
+		goto out;
+
+	igb_phy_force_speed_duplex_setup(hw, &phy_data);
+
+	ret_val = phy->ops.write_reg(hw, PHY_CONTROL, phy_data);
+	if (ret_val)
+		goto out;
+	ret_val = hw->phy.ops.read_reg(hw, BCM54616_EXT_CTRL, &phy_data);
+
+	phy_data |= BCM54616_EXT_CTRL_MDIX_AUTO;
+	ret_val = hw->phy.ops.write_reg(hw, BCM54616_EXT_CTRL, phy_data);
+	if (ret_val)
+		return ret_val;
+
+	ret_val = phy->ops.write_reg(hw, PHY_CONTROL, phy_data);
+	if (ret_val)
+		return ret_val;
+
+	/* Reset the phy to commit changes. */
+	ret_val = igb_phy_sw_reset(hw);
+	if (ret_val)
+		goto out;
+
+	if (phy->autoneg_wait_to_complete) {
+		hw_dbg("Waiting for forced speed/duplex link on M88 phy.\n");
+
+		ret_val = igb_phy_has_link(hw, PHY_FORCE_LIMIT,
+						     100000, &link);
+		if (ret_val)
+			return ret_val;
+		if (!link)
+			hw_dbg("Link taking longer than expected.\n");
+
+		/* Try once more */
+		ret_val = igb_phy_has_link(hw, PHY_FORCE_LIMIT,
+						     100000, &link);
+	}
+out:
+	return ret_val;
+}
+
+/**
+  *  igb_check_polarity_bcm54616 - Checks the polarity.
+  *  @hw: pointer to the HW structure
+  *
+  *  Success returns 0, Failure returns -E1000_ERR_PHY (-2)
+  *
+  *  Polarity is determined based on the PHY specific status register.
+  **/
+s32 igb_check_polarity_bcm54616(struct e1000_hw *hw)
+{
+	s32 ret_val;
+
+	hw_dbg("igb_check_polarity_bcm54616");
+	/*According to SPEC there is no polarity invert except for 10baseT*/
+	ret_val = e1000_rev_polarity_normal;
+
+	return ret_val;
+}
+
+/**
+ *
+ *  igb_get_cable_length_bcm54616 - Determine cable length for m88 PHY
+ *  @hw: pointer to the HW structure
+ *
+ *  Reads the PHY specific status register to retrieve the cable length
+ *  BCM54616 doesn't talk about cable length in the datasheet.
+ *
+ **/
+s32 igb_get_cable_length_bcm54616(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val = 0;
+
+	hw_dbg("igb_get_cable_length_bcm54616");
+	phy->cable_length = E1000_CABLE_LENGTH_UNDEFINED;
+	return ret_val;
+}
+
+/**
+ * igb_get_phy_info_bcm54616 - Retrieve PHY information
+ *  @hw: pointer to the HW structure
+ *
+ *  Valid for only copper links.  Read the PHY status register (sticky read)
+ *  to verify that link is up.  Read the PHY special control register to
+ *  determine the polarity and 10base-T extended distance.  Read the PHY
+ *  special status register to determine MDI/MDIx and current speed.  If
+ *  speed is 1000, then determine cable length, local and remote receiver.
+ **/
+s32 igb_get_phy_info_bcm54616(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32  ret_val = 0;
+	bool link;
+
+	hw_dbg("igb_get_phy_info_bcm54616");
+
+	if (phy->media_type != e1000_media_type_copper) {
+		hw_dbg("Phy info is only valid for copper media\n");
+		return -E1000_ERR_CONFIG;
+	}
+
+	ret_val = igb_phy_has_link(hw, 1, 0, &link);
+	if (ret_val)
+		return ret_val;
+
+	if (!link) {
+		hw_dbg("Phy info is only valid if link is up\n");
+		return -E1000_ERR_CONFIG;
+	}
+
+	/*FIXMEL: Add polarity related code*/
+	phy->cable_length = igb_get_cable_length_bcm54616(hw);
+	return ret_val;
+}
+
+/**
  *  igb_copper_link_autoneg - Setup/Enable autoneg for copper link
  *  @hw: pointer to the HW structure
  *
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.h b/drivers/net/ethernet/intel/igb/e1000_phy.h
index 7af4ffa..cc9cb34 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.h
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.h
@@ -37,6 +37,11 @@ enum e1000_smart_speed {
 	e1000_smart_speed_off
 };
 
+s32  igb_copper_link_setup_bcm54616(struct e1000_hw *hw);
+s32  igb_phy_force_speed_duplex_bcm54616(struct e1000_hw *hw);
+s32  igb_get_cable_length_bcm54616(struct e1000_hw *hw);
+s32  igb_get_phy_info_bcm54616(struct e1000_hw *hw);
+
 s32  igb_check_downshift(struct e1000_hw *hw);
 s32  igb_check_reset_block(struct e1000_hw *hw);
 s32  igb_copper_link_setup_igp(struct e1000_hw *hw);
